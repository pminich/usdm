# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class NarrativeContent(BaseModel):
    """
    NarrativeContent
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True)]
    name: Annotated[str, Field(min_length=1, strict=True)]
    section_number: Optional[StrictStr] = Field(default=None, alias="sectionNumber")
    section_title: Optional[StrictStr] = Field(default=None, alias="sectionTitle")
    display_section_number: StrictBool = Field(alias="displaySectionNumber")
    display_section_title: StrictBool = Field(alias="displaySectionTitle")
    child_ids: Optional[List[StrictStr]] = Field(default=None, alias="childIds")
    previous_id: Optional[StrictStr] = Field(default=None, alias="previousId")
    next_id: Optional[StrictStr] = Field(default=None, alias="nextId")
    content_item_id: Optional[StrictStr] = Field(default=None, alias="contentItemId")
    instance_type: StrictStr = Field(alias="instanceType")
    __properties: ClassVar[List[str]] = ["id", "name", "sectionNumber", "sectionTitle", "displaySectionNumber", "displaySectionTitle", "childIds", "previousId", "nextId", "contentItemId", "instanceType"]

    @field_validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NarrativeContent']):
            raise ValueError("must be one of enum values ('NarrativeContent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NarrativeContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if section_number (nullable) is None
        # and model_fields_set contains the field
        if self.section_number is None and "section_number" in self.model_fields_set:
            _dict['sectionNumber'] = None

        # set to None if section_title (nullable) is None
        # and model_fields_set contains the field
        if self.section_title is None and "section_title" in self.model_fields_set:
            _dict['sectionTitle'] = None

        # set to None if previous_id (nullable) is None
        # and model_fields_set contains the field
        if self.previous_id is None and "previous_id" in self.model_fields_set:
            _dict['previousId'] = None

        # set to None if next_id (nullable) is None
        # and model_fields_set contains the field
        if self.next_id is None and "next_id" in self.model_fields_set:
            _dict['nextId'] = None

        # set to None if content_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.content_item_id is None and "content_item_id" in self.model_fields_set:
            _dict['contentItemId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NarrativeContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "sectionNumber": obj.get("sectionNumber"),
            "sectionTitle": obj.get("sectionTitle"),
            "displaySectionNumber": obj.get("displaySectionNumber"),
            "displaySectionTitle": obj.get("displaySectionTitle"),
            "childIds": obj.get("childIds"),
            "previousId": obj.get("previousId"),
            "nextId": obj.get("nextId"),
            "contentItemId": obj.get("contentItemId"),
            "instanceType": obj.get("instanceType")
        })
        return _obj


