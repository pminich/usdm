# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.code import Code
from typing import Optional, Set
from typing_extensions import Self

class Timing(BaseModel):
    """
    Timing
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True)]
    name: Annotated[str, Field(min_length=1, strict=True)]
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    type: Code
    value: StrictStr
    value_label: StrictStr = Field(alias="valueLabel")
    relative_to_from: Code = Field(alias="relativeToFrom")
    relative_from_scheduled_instance_id: StrictStr = Field(alias="relativeFromScheduledInstanceId")
    relative_to_scheduled_instance_id: Optional[StrictStr] = Field(default=None, alias="relativeToScheduledInstanceId")
    window_lower: Optional[StrictStr] = Field(default=None, alias="windowLower")
    window_upper: Optional[StrictStr] = Field(default=None, alias="windowUpper")
    window_label: Optional[StrictStr] = Field(default=None, alias="windowLabel")
    instance_type: StrictStr = Field(alias="instanceType")
    __properties: ClassVar[List[str]] = ["id", "name", "label", "description", "type", "value", "valueLabel", "relativeToFrom", "relativeFromScheduledInstanceId", "relativeToScheduledInstanceId", "windowLower", "windowUpper", "windowLabel", "instanceType"]

    @field_validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Timing']):
            raise ValueError("must be one of enum values ('Timing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Timing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relative_to_from
        if self.relative_to_from:
            _dict['relativeToFrom'] = self.relative_to_from.to_dict()
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if relative_to_scheduled_instance_id (nullable) is None
        # and model_fields_set contains the field
        if self.relative_to_scheduled_instance_id is None and "relative_to_scheduled_instance_id" in self.model_fields_set:
            _dict['relativeToScheduledInstanceId'] = None

        # set to None if window_lower (nullable) is None
        # and model_fields_set contains the field
        if self.window_lower is None and "window_lower" in self.model_fields_set:
            _dict['windowLower'] = None

        # set to None if window_upper (nullable) is None
        # and model_fields_set contains the field
        if self.window_upper is None and "window_upper" in self.model_fields_set:
            _dict['windowUpper'] = None

        # set to None if window_label (nullable) is None
        # and model_fields_set contains the field
        if self.window_label is None and "window_label" in self.model_fields_set:
            _dict['windowLabel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Timing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "type": Code.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "value": obj.get("value"),
            "valueLabel": obj.get("valueLabel"),
            "relativeToFrom": Code.from_dict(obj["relativeToFrom"]) if obj.get("relativeToFrom") is not None else None,
            "relativeFromScheduledInstanceId": obj.get("relativeFromScheduledInstanceId"),
            "relativeToScheduledInstanceId": obj.get("relativeToScheduledInstanceId"),
            "windowLower": obj.get("windowLower"),
            "windowUpper": obj.get("windowUpper"),
            "windowLabel": obj.get("windowLabel"),
            "instanceType": obj.get("instanceType")
        })
        return _obj


