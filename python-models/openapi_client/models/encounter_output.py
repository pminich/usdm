# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.code import Code
from openapi_client.models.comment_annotation import CommentAnnotation
from openapi_client.models.transition_rule import TransitionRule
from typing import Optional, Set
from typing_extensions import Self

class EncounterOutput(BaseModel):
    """
    EncounterOutput
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True)]
    name: Annotated[str, Field(min_length=1, strict=True)]
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    type: Code
    previous_id: Optional[StrictStr] = Field(default=None, alias="previousId")
    next_id: Optional[StrictStr] = Field(default=None, alias="nextId")
    scheduled_at_id: Optional[StrictStr] = Field(default=None, alias="scheduledAtId")
    environmental_settings: Optional[List[Code]] = Field(default=None, alias="environmentalSettings")
    contact_modes: Optional[List[Code]] = Field(default=None, alias="contactModes")
    transition_start_rule: Optional[TransitionRule] = Field(default=None, alias="transitionStartRule")
    transition_end_rule: Optional[TransitionRule] = Field(default=None, alias="transitionEndRule")
    notes: Optional[List[CommentAnnotation]] = None
    instance_type: StrictStr = Field(alias="instanceType")
    __properties: ClassVar[List[str]] = ["id", "name", "label", "description", "type", "previousId", "nextId", "scheduledAtId", "environmentalSettings", "contactModes", "transitionStartRule", "transitionEndRule", "notes", "instanceType"]

    @field_validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Encounter']):
            raise ValueError("must be one of enum values ('Encounter')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EncounterOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environmental_settings (list)
        _items = []
        if self.environmental_settings:
            for _item_environmental_settings in self.environmental_settings:
                if _item_environmental_settings:
                    _items.append(_item_environmental_settings.to_dict())
            _dict['environmentalSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contact_modes (list)
        _items = []
        if self.contact_modes:
            for _item_contact_modes in self.contact_modes:
                if _item_contact_modes:
                    _items.append(_item_contact_modes.to_dict())
            _dict['contactModes'] = _items
        # override the default output from pydantic by calling `to_dict()` of transition_start_rule
        if self.transition_start_rule:
            _dict['transitionStartRule'] = self.transition_start_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transition_end_rule
        if self.transition_end_rule:
            _dict['transitionEndRule'] = self.transition_end_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict['notes'] = _items
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if previous_id (nullable) is None
        # and model_fields_set contains the field
        if self.previous_id is None and "previous_id" in self.model_fields_set:
            _dict['previousId'] = None

        # set to None if next_id (nullable) is None
        # and model_fields_set contains the field
        if self.next_id is None and "next_id" in self.model_fields_set:
            _dict['nextId'] = None

        # set to None if scheduled_at_id (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled_at_id is None and "scheduled_at_id" in self.model_fields_set:
            _dict['scheduledAtId'] = None

        # set to None if transition_start_rule (nullable) is None
        # and model_fields_set contains the field
        if self.transition_start_rule is None and "transition_start_rule" in self.model_fields_set:
            _dict['transitionStartRule'] = None

        # set to None if transition_end_rule (nullable) is None
        # and model_fields_set contains the field
        if self.transition_end_rule is None and "transition_end_rule" in self.model_fields_set:
            _dict['transitionEndRule'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EncounterOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "type": Code.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "previousId": obj.get("previousId"),
            "nextId": obj.get("nextId"),
            "scheduledAtId": obj.get("scheduledAtId"),
            "environmentalSettings": [Code.from_dict(_item) for _item in obj["environmentalSettings"]] if obj.get("environmentalSettings") is not None else None,
            "contactModes": [Code.from_dict(_item) for _item in obj["contactModes"]] if obj.get("contactModes") is not None else None,
            "transitionStartRule": TransitionRule.from_dict(obj["transitionStartRule"]) if obj.get("transitionStartRule") is not None else None,
            "transitionEndRule": TransitionRule.from_dict(obj["transitionEndRule"]) if obj.get("transitionEndRule") is not None else None,
            "notes": [CommentAnnotation.from_dict(_item) for _item in obj["notes"]] if obj.get("notes") is not None else None,
            "instanceType": obj.get("instanceType")
        })
        return _obj


