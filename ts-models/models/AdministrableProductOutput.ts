/**
 * DDF USDM API
 * A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.
 *
 * OpenAPI spec version: 3.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AdministrableProductIdentifier } from '../models/AdministrableProductIdentifier';
import { AdministrableProductPropertyOutput } from '../models/AdministrableProductPropertyOutput';
import { AliasCode } from '../models/AliasCode';
import { Code } from '../models/Code';
import { CommentAnnotation } from '../models/CommentAnnotation';
import { IngredientOutput } from '../models/IngredientOutput';


export class AdministrableProductOutput {
    'id': string;
    'name': string;
    'label'?: string | null;
    'description'?: string | null;
    'pharmacologicClass'?: Code | null;
    'administrableDoseForm': AliasCode | null;
    'productDesignation': Code;
    'sourcing'?: Code | null;
    'properties'?: Array<AdministrableProductPropertyOutput>;
    'identifiers'?: Array<AdministrableProductIdentifier>;
    'ingredients'?: Array<IngredientOutput>;
    'notes'?: Array<CommentAnnotation>;
    'instanceType': AdministrableProductOutputInstanceTypeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "pharmacologicClass",
            "baseName": "pharmacologicClass",
            "type": "Code",
            "format": ""
        },
        {
            "name": "administrableDoseForm",
            "baseName": "administrableDoseForm",
            "type": "AliasCode",
            "format": ""
        },
        {
            "name": "productDesignation",
            "baseName": "productDesignation",
            "type": "Code",
            "format": ""
        },
        {
            "name": "sourcing",
            "baseName": "sourcing",
            "type": "Code",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<AdministrableProductPropertyOutput>",
            "format": ""
        },
        {
            "name": "identifiers",
            "baseName": "identifiers",
            "type": "Array<AdministrableProductIdentifier>",
            "format": ""
        },
        {
            "name": "ingredients",
            "baseName": "ingredients",
            "type": "Array<IngredientOutput>",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "Array<CommentAnnotation>",
            "format": ""
        },
        {
            "name": "instanceType",
            "baseName": "instanceType",
            "type": "AdministrableProductOutputInstanceTypeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return AdministrableProductOutput.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum AdministrableProductOutputInstanceTypeEnum {
    AdministrableProduct = 'AdministrableProduct'
}

