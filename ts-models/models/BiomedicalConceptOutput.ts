/**
 * DDF USDM API
 * A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.
 *
 * OpenAPI spec version: 3.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AliasCode } from '../models/AliasCode';
import { BiomedicalConceptPropertyOutput } from '../models/BiomedicalConceptPropertyOutput';
import { CommentAnnotation } from '../models/CommentAnnotation';


export class BiomedicalConceptOutput {
    'id': string;
    'name': string;
    'label'?: string | null;
    'synonyms'?: Array<string>;
    'reference': string;
    'properties'?: Array<BiomedicalConceptPropertyOutput>;
    'code': AliasCode | null;
    'notes'?: Array<CommentAnnotation>;
    'instanceType': BiomedicalConceptOutputInstanceTypeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string",
            "format": ""
        },
        {
            "name": "synonyms",
            "baseName": "synonyms",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<BiomedicalConceptPropertyOutput>",
            "format": ""
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "AliasCode",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "Array<CommentAnnotation>",
            "format": ""
        },
        {
            "name": "instanceType",
            "baseName": "instanceType",
            "type": "BiomedicalConceptOutputInstanceTypeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return BiomedicalConceptOutput.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum BiomedicalConceptOutputInstanceTypeEnum {
    BiomedicalConcept = 'BiomedicalConcept'
}

