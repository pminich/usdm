/**
 * DDF USDM API
 * A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.
 *
 * OpenAPI spec version: 3.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ActivityInput } from '../models/ActivityInput';
import { AliasCode } from '../models/AliasCode';
import { AnalysisPopulationInput } from '../models/AnalysisPopulationInput';
import { BiomedicalConceptCategoryInput } from '../models/BiomedicalConceptCategoryInput';
import { BiomedicalConceptInput } from '../models/BiomedicalConceptInput';
import { BiomedicalConceptSurrogateInput } from '../models/BiomedicalConceptSurrogateInput';
import { BiospecimenRetention } from '../models/BiospecimenRetention';
import { Code } from '../models/Code';
import { CommentAnnotation } from '../models/CommentAnnotation';
import { ConditionInput } from '../models/ConditionInput';
import { EncounterInput } from '../models/EncounterInput';
import { EstimandInput } from '../models/EstimandInput';
import { IndicationInput } from '../models/IndicationInput';
import { InterventionalStudyDesignInput } from '../models/InterventionalStudyDesignInput';
import { ObjectiveInput } from '../models/ObjectiveInput';
import { ObservationalStudyDesignInput } from '../models/ObservationalStudyDesignInput';
import { ScheduleTimelineInput } from '../models/ScheduleTimelineInput';
import { StudyArmInput } from '../models/StudyArmInput';
import { StudyCell } from '../models/StudyCell';
import { StudyDesignPopulationInput } from '../models/StudyDesignPopulationInput';
import { StudyElementInput } from '../models/StudyElementInput';
import { StudyEpochInput } from '../models/StudyEpochInput';
import { StudyInterventionInput } from '../models/StudyInterventionInput';
import { SyntaxTemplateDictionary } from '../models/SyntaxTemplateDictionary';


export class StudyVersionInputStudyDesignsInner {
    'id': string;
    'name': string;
    'label'?: string;
    'description'?: string;
    'studyType'?: Code;
    'studyPhase'?: AliasCode;
    'therapeuticAreas'?: Array<Code>;
    'characteristics'?: Array<Code>;
    'encounters'?: Array<EncounterInput>;
    'activities'?: Array<ActivityInput>;
    'biomedicalConcepts'?: Array<BiomedicalConceptInput>;
    'bcCategories'?: Array<BiomedicalConceptCategoryInput>;
    'bcSurrogates'?: Array<BiomedicalConceptSurrogateInput>;
    'arms': Array<StudyArmInput>;
    'studyCells': Array<StudyCell>;
    'rationale': string;
    'epochs': Array<StudyEpochInput>;
    'elements'?: Array<StudyElementInput>;
    'estimands'?: Array<EstimandInput>;
    'indications'?: Array<IndicationInput>;
    'studyInterventions'?: Array<StudyInterventionInput>;
    'objectives'?: Array<ObjectiveInput>;
    'population'?: StudyDesignPopulationInput;
    'analysisPopulations'?: Array<AnalysisPopulationInput>;
    'scheduleTimelines'?: Array<ScheduleTimelineInput>;
    'biospecimenRetentions'?: Array<BiospecimenRetention>;
    'documentVersionIds'?: Array<string>;
    'dictionaries'?: Array<SyntaxTemplateDictionary>;
    'conditions'?: Array<ConditionInput>;
    'notes'?: Array<CommentAnnotation>;
    'instanceType': StudyVersionInputStudyDesignsInnerInstanceTypeEnum;
    'subTypes'?: Array<Code>;
    'model': Code;
    'intentTypes'?: Array<Code>;
    'blindingSchema'?: AliasCode;
    'timePerspective': Code;
    'samplingMethod'?: Code;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "studyType",
            "baseName": "studyType",
            "type": "Code",
            "format": ""
        },
        {
            "name": "studyPhase",
            "baseName": "studyPhase",
            "type": "AliasCode",
            "format": ""
        },
        {
            "name": "therapeuticAreas",
            "baseName": "therapeuticAreas",
            "type": "Array<Code>",
            "format": ""
        },
        {
            "name": "characteristics",
            "baseName": "characteristics",
            "type": "Array<Code>",
            "format": ""
        },
        {
            "name": "encounters",
            "baseName": "encounters",
            "type": "Array<EncounterInput>",
            "format": ""
        },
        {
            "name": "activities",
            "baseName": "activities",
            "type": "Array<ActivityInput>",
            "format": ""
        },
        {
            "name": "biomedicalConcepts",
            "baseName": "biomedicalConcepts",
            "type": "Array<BiomedicalConceptInput>",
            "format": ""
        },
        {
            "name": "bcCategories",
            "baseName": "bcCategories",
            "type": "Array<BiomedicalConceptCategoryInput>",
            "format": ""
        },
        {
            "name": "bcSurrogates",
            "baseName": "bcSurrogates",
            "type": "Array<BiomedicalConceptSurrogateInput>",
            "format": ""
        },
        {
            "name": "arms",
            "baseName": "arms",
            "type": "Array<StudyArmInput>",
            "format": ""
        },
        {
            "name": "studyCells",
            "baseName": "studyCells",
            "type": "Array<StudyCell>",
            "format": ""
        },
        {
            "name": "rationale",
            "baseName": "rationale",
            "type": "string",
            "format": ""
        },
        {
            "name": "epochs",
            "baseName": "epochs",
            "type": "Array<StudyEpochInput>",
            "format": ""
        },
        {
            "name": "elements",
            "baseName": "elements",
            "type": "Array<StudyElementInput>",
            "format": ""
        },
        {
            "name": "estimands",
            "baseName": "estimands",
            "type": "Array<EstimandInput>",
            "format": ""
        },
        {
            "name": "indications",
            "baseName": "indications",
            "type": "Array<IndicationInput>",
            "format": ""
        },
        {
            "name": "studyInterventions",
            "baseName": "studyInterventions",
            "type": "Array<StudyInterventionInput>",
            "format": ""
        },
        {
            "name": "objectives",
            "baseName": "objectives",
            "type": "Array<ObjectiveInput>",
            "format": ""
        },
        {
            "name": "population",
            "baseName": "population",
            "type": "StudyDesignPopulationInput",
            "format": ""
        },
        {
            "name": "analysisPopulations",
            "baseName": "analysisPopulations",
            "type": "Array<AnalysisPopulationInput>",
            "format": ""
        },
        {
            "name": "scheduleTimelines",
            "baseName": "scheduleTimelines",
            "type": "Array<ScheduleTimelineInput>",
            "format": ""
        },
        {
            "name": "biospecimenRetentions",
            "baseName": "biospecimenRetentions",
            "type": "Array<BiospecimenRetention>",
            "format": ""
        },
        {
            "name": "documentVersionIds",
            "baseName": "documentVersionIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "dictionaries",
            "baseName": "dictionaries",
            "type": "Array<SyntaxTemplateDictionary>",
            "format": ""
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<ConditionInput>",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "Array<CommentAnnotation>",
            "format": ""
        },
        {
            "name": "instanceType",
            "baseName": "instanceType",
            "type": "StudyVersionInputStudyDesignsInnerInstanceTypeEnum",
            "format": ""
        },
        {
            "name": "subTypes",
            "baseName": "subTypes",
            "type": "Array<Code>",
            "format": ""
        },
        {
            "name": "model",
            "baseName": "model",
            "type": "Code",
            "format": ""
        },
        {
            "name": "intentTypes",
            "baseName": "intentTypes",
            "type": "Array<Code>",
            "format": ""
        },
        {
            "name": "blindingSchema",
            "baseName": "blindingSchema",
            "type": "AliasCode",
            "format": ""
        },
        {
            "name": "timePerspective",
            "baseName": "timePerspective",
            "type": "Code",
            "format": ""
        },
        {
            "name": "samplingMethod",
            "baseName": "samplingMethod",
            "type": "Code",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StudyVersionInputStudyDesignsInner.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum StudyVersionInputStudyDesignsInnerInstanceTypeEnum {
    ObservationalStudyDesign = 'ObservationalStudyDesign'
}

