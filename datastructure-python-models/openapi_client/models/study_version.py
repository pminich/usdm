# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StudyVersion(BaseModel):
    """
    NCI C-Code: C188816 Definition: A plan at a particular point in time for a study. Preferred Term: Study Version
    """ # noqa: E501
    id: StrictStr
    version_identifier: StrictStr = Field(alias="versionIdentifier")
    rationale: StrictStr
    abbreviations: Optional[List[StrictStr]] = None
    business_therapeutic_areas: Optional[List[StrictStr]] = Field(default=None, alias="businessTherapeuticAreas")
    notes: Optional[List[StrictStr]] = None
    date_values: Optional[List[StrictStr]] = Field(default=None, alias="dateValues")
    reference_identifiers: Optional[List[StrictStr]] = Field(default=None, alias="referenceIdentifiers")
    amendments: Optional[List[StrictStr]] = None
    document_versions: Optional[List[StrictStr]] = Field(default=None, alias="documentVersions")
    study_designs: Optional[List[StrictStr]] = Field(default=None, alias="studyDesigns")
    study_identifiers: List[StrictStr] = Field(alias="studyIdentifiers")
    titles: List[StrictStr]
    criteria: Optional[List[StrictStr]] = None
    narrative_content_items: Optional[List[StrictStr]] = Field(default=None, alias="narrativeContentItems")
    roles: Optional[List[StrictStr]] = None
    organizations: Optional[List[StrictStr]] = None
    administrable_products: Optional[List[StrictStr]] = Field(default=None, alias="administrableProducts")
    medical_devices: Optional[List[StrictStr]] = Field(default=None, alias="medicalDevices")
    product_organization_roles: Optional[List[StrictStr]] = Field(default=None, alias="productOrganizationRoles")
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties: ClassVar[List[str]] = ["id", "versionIdentifier", "rationale", "abbreviations", "businessTherapeuticAreas", "notes", "dateValues", "referenceIdentifiers", "amendments", "documentVersions", "studyDesigns", "studyIdentifiers", "titles", "criteria", "narrativeContentItems", "roles", "organizations", "administrableProducts", "medicalDevices", "productOrganizationRoles", "instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StudyVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StudyVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "versionIdentifier": obj.get("versionIdentifier"),
            "rationale": obj.get("rationale"),
            "abbreviations": obj.get("abbreviations"),
            "businessTherapeuticAreas": obj.get("businessTherapeuticAreas"),
            "notes": obj.get("notes"),
            "dateValues": obj.get("dateValues"),
            "referenceIdentifiers": obj.get("referenceIdentifiers"),
            "amendments": obj.get("amendments"),
            "documentVersions": obj.get("documentVersions"),
            "studyDesigns": obj.get("studyDesigns"),
            "studyIdentifiers": obj.get("studyIdentifiers"),
            "titles": obj.get("titles"),
            "criteria": obj.get("criteria"),
            "narrativeContentItems": obj.get("narrativeContentItems"),
            "roles": obj.get("roles"),
            "organizations": obj.get("organizations"),
            "administrableProducts": obj.get("administrableProducts"),
            "medicalDevices": obj.get("medicalDevices"),
            "productOrganizationRoles": obj.get("productOrganizationRoles"),
            "instanceType": obj.get("instanceType")
        })
        return _obj


