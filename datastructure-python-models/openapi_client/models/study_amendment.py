# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StudyAmendment(BaseModel):
    """
    NCI C-Code: C207594 Definition: A written description of a change(s) to, or formal clarification of, a study. Preferred Term: Study Amendment
    """ # noqa: E501
    id: StrictStr
    number: StrictStr
    summary: StrictStr
    notes: Optional[List[StrictStr]] = None
    geographic_scopes: List[StrictStr] = Field(alias="geographicScopes")
    date_values: Optional[List[StrictStr]] = Field(default=None, alias="dateValues")
    impacts: Optional[List[StrictStr]] = None
    enrollments: Optional[List[StrictStr]] = None
    secondary_reasons: Optional[List[StrictStr]] = Field(default=None, alias="secondaryReasons")
    changes: List[StrictStr]
    previous: Optional[StrictStr] = None
    primary_reason: StrictStr = Field(alias="primaryReason")
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties: ClassVar[List[str]] = ["id", "number", "summary", "notes", "geographicScopes", "dateValues", "impacts", "enrollments", "secondaryReasons", "changes", "previous", "primaryReason", "instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StudyAmendment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StudyAmendment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "summary": obj.get("summary"),
            "notes": obj.get("notes"),
            "geographicScopes": obj.get("geographicScopes"),
            "dateValues": obj.get("dateValues"),
            "impacts": obj.get("impacts"),
            "enrollments": obj.get("enrollments"),
            "secondaryReasons": obj.get("secondaryReasons"),
            "changes": obj.get("changes"),
            "previous": obj.get("previous"),
            "primaryReason": obj.get("primaryReason"),
            "instanceType": obj.get("instanceType")
        })
        return _obj


