# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MedicalDevice(BaseModel):
    """
    NCI C-Code: C16830 Definition: Any instrument, apparatus, implement, machine, appliance, implant, reagent for in vitro use, software, material or other similar or related article, intended by the manufacturer to be used, alone or in combination for, one or more specific medical purpose(s). [After REGULATION (EU) 2017/745 OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL of 5 April 2017 on medical devices] Preferred Term: Medical Device
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    description: StrictStr
    label: StrictStr
    hardware_version: StrictStr = Field(alias="hardwareVersion")
    software_version: StrictStr = Field(alias="softwareVersion")
    embedded_product: Optional[StrictStr] = Field(default=None, alias="embeddedProduct")
    sourcing: Optional[StrictStr] = None
    notes: StrictStr
    identifiers: Optional[List[StrictStr]] = None
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "label", "hardwareVersion", "softwareVersion", "embeddedProduct", "sourcing", "notes", "identifiers", "instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MedicalDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MedicalDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "label": obj.get("label"),
            "hardwareVersion": obj.get("hardwareVersion"),
            "softwareVersion": obj.get("softwareVersion"),
            "embeddedProduct": obj.get("embeddedProduct"),
            "sourcing": obj.get("sourcing"),
            "notes": obj.get("notes"),
            "identifiers": obj.get("identifiers"),
            "instanceType": obj.get("instanceType")
        })
        return _obj


