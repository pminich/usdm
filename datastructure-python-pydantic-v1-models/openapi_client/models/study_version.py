# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class StudyVersion(BaseModel):
    """
    NCI C-Code: C188816 Definition: A plan at a particular point in time for a study. Preferred Term: Study Version  # noqa: E501
    """
    id: StrictStr = Field(...)
    version_identifier: StrictStr = Field(default=..., alias="versionIdentifier")
    rationale: StrictStr = Field(...)
    abbreviations: Optional[conlist(StrictStr)] = None
    business_therapeutic_areas: Optional[conlist(StrictStr)] = Field(default=None, alias="businessTherapeuticAreas")
    notes: Optional[conlist(StrictStr)] = None
    date_values: Optional[conlist(StrictStr)] = Field(default=None, alias="dateValues")
    reference_identifiers: Optional[conlist(StrictStr)] = Field(default=None, alias="referenceIdentifiers")
    amendments: Optional[conlist(StrictStr)] = None
    document_versions: Optional[conlist(StrictStr)] = Field(default=None, alias="documentVersions")
    study_designs: Optional[conlist(StrictStr)] = Field(default=None, alias="studyDesigns")
    study_identifiers: conlist(StrictStr) = Field(default=..., alias="studyIdentifiers")
    titles: conlist(StrictStr) = Field(...)
    criteria: Optional[conlist(StrictStr)] = None
    narrative_content_items: Optional[conlist(StrictStr)] = Field(default=None, alias="narrativeContentItems")
    roles: Optional[conlist(StrictStr)] = None
    organizations: Optional[conlist(StrictStr)] = None
    administrable_products: Optional[conlist(StrictStr)] = Field(default=None, alias="administrableProducts")
    medical_devices: Optional[conlist(StrictStr)] = Field(default=None, alias="medicalDevices")
    product_organization_roles: Optional[conlist(StrictStr)] = Field(default=None, alias="productOrganizationRoles")
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties = ["id", "versionIdentifier", "rationale", "abbreviations", "businessTherapeuticAreas", "notes", "dateValues", "referenceIdentifiers", "amendments", "documentVersions", "studyDesigns", "studyIdentifiers", "titles", "criteria", "narrativeContentItems", "roles", "organizations", "administrableProducts", "medicalDevices", "productOrganizationRoles", "instanceType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StudyVersion:
        """Create an instance of StudyVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StudyVersion:
        """Create an instance of StudyVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StudyVersion.parse_obj(obj)

        _obj = StudyVersion.parse_obj({
            "id": obj.get("id"),
            "version_identifier": obj.get("versionIdentifier"),
            "rationale": obj.get("rationale"),
            "abbreviations": obj.get("abbreviations"),
            "business_therapeutic_areas": obj.get("businessTherapeuticAreas"),
            "notes": obj.get("notes"),
            "date_values": obj.get("dateValues"),
            "reference_identifiers": obj.get("referenceIdentifiers"),
            "amendments": obj.get("amendments"),
            "document_versions": obj.get("documentVersions"),
            "study_designs": obj.get("studyDesigns"),
            "study_identifiers": obj.get("studyIdentifiers"),
            "titles": obj.get("titles"),
            "criteria": obj.get("criteria"),
            "narrative_content_items": obj.get("narrativeContentItems"),
            "roles": obj.get("roles"),
            "organizations": obj.get("organizations"),
            "administrable_products": obj.get("administrableProducts"),
            "medical_devices": obj.get("medicalDevices"),
            "product_organization_roles": obj.get("productOrganizationRoles"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


