# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class Encounter(BaseModel):
    """
    NCI C-Code: CNEW Definition: Any physical or virtual contact between two or more parties involved in a study, at which an assessment or activity takes place. Preferred Term: Study Encounter  # noqa: E501
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    description: StrictStr = Field(...)
    label: StrictStr = Field(...)
    environmental_settings: Optional[conlist(StrictStr)] = Field(default=None, alias="environmentalSettings")
    contact_modes: Optional[conlist(StrictStr)] = Field(default=None, alias="contactModes")
    type: StrictStr = Field(...)
    notes: Optional[conlist(StrictStr)] = None
    transition_end_rule: Optional[StrictStr] = Field(default=None, alias="transitionEndRule")
    next: Optional[StrictStr] = None
    transition_start_rule: Optional[StrictStr] = Field(default=None, alias="transitionStartRule")
    scheduled_at: Optional[StrictStr] = Field(default=None, alias="scheduledAt")
    previous: Optional[StrictStr] = None
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties = ["id", "name", "description", "label", "environmentalSettings", "contactModes", "type", "notes", "transitionEndRule", "next", "transitionStartRule", "scheduledAt", "previous", "instanceType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Encounter:
        """Create an instance of Encounter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Encounter:
        """Create an instance of Encounter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Encounter.parse_obj(obj)

        _obj = Encounter.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "label": obj.get("label"),
            "environmental_settings": obj.get("environmentalSettings"),
            "contact_modes": obj.get("contactModes"),
            "type": obj.get("type"),
            "notes": obj.get("notes"),
            "transition_end_rule": obj.get("transitionEndRule"),
            "next": obj.get("next"),
            "transition_start_rule": obj.get("transitionStartRule"),
            "scheduled_at": obj.get("scheduledAt"),
            "previous": obj.get("previous"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


