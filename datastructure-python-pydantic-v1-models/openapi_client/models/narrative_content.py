# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class NarrativeContent(BaseModel):
    """
    NCI C-Code: C207592 Definition: The container that holds an instance of unstructured text and which may include objects such as tables, figures, and images. Preferred Term: Narrative Content  # noqa: E501
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    section_number: StrictStr = Field(default=..., alias="sectionNumber")
    section_title: StrictStr = Field(default=..., alias="sectionTitle")
    display_section_title: StrictStr = Field(default=..., alias="displaySectionTitle")
    display_section_number: StrictStr = Field(default=..., alias="displaySectionNumber")
    content_item: Optional[StrictStr] = Field(default=None, alias="contentItem")
    previous: Optional[StrictStr] = None
    next: Optional[StrictStr] = None
    children: Optional[conlist(StrictStr)] = None
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties = ["id", "name", "sectionNumber", "sectionTitle", "displaySectionTitle", "displaySectionNumber", "contentItem", "previous", "next", "children", "instanceType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NarrativeContent:
        """Create an instance of NarrativeContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NarrativeContent:
        """Create an instance of NarrativeContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NarrativeContent.parse_obj(obj)

        _obj = NarrativeContent.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "section_number": obj.get("sectionNumber"),
            "section_title": obj.get("sectionTitle"),
            "display_section_title": obj.get("displaySectionTitle"),
            "display_section_number": obj.get("displaySectionNumber"),
            "content_item": obj.get("contentItem"),
            "previous": obj.get("previous"),
            "next": obj.get("next"),
            "children": obj.get("children"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


