# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class StudyAmendment(BaseModel):
    """
    NCI C-Code: C207594 Definition: A written description of a change(s) to, or formal clarification of, a study. Preferred Term: Study Amendment  # noqa: E501
    """
    id: StrictStr = Field(...)
    number: StrictStr = Field(...)
    summary: StrictStr = Field(...)
    notes: Optional[conlist(StrictStr)] = None
    geographic_scopes: conlist(StrictStr) = Field(default=..., alias="geographicScopes")
    date_values: Optional[conlist(StrictStr)] = Field(default=None, alias="dateValues")
    impacts: Optional[conlist(StrictStr)] = None
    enrollments: Optional[conlist(StrictStr)] = None
    secondary_reasons: Optional[conlist(StrictStr)] = Field(default=None, alias="secondaryReasons")
    changes: conlist(StrictStr) = Field(...)
    previous: Optional[StrictStr] = None
    primary_reason: StrictStr = Field(default=..., alias="primaryReason")
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties = ["id", "number", "summary", "notes", "geographicScopes", "dateValues", "impacts", "enrollments", "secondaryReasons", "changes", "previous", "primaryReason", "instanceType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StudyAmendment:
        """Create an instance of StudyAmendment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StudyAmendment:
        """Create an instance of StudyAmendment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StudyAmendment.parse_obj(obj)

        _obj = StudyAmendment.parse_obj({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "summary": obj.get("summary"),
            "notes": obj.get("notes"),
            "geographic_scopes": obj.get("geographicScopes"),
            "date_values": obj.get("dateValues"),
            "impacts": obj.get("impacts"),
            "enrollments": obj.get("enrollments"),
            "secondary_reasons": obj.get("secondaryReasons"),
            "changes": obj.get("changes"),
            "previous": obj.get("previous"),
            "primary_reason": obj.get("primaryReason"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


