# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class MedicalDevice(BaseModel):
    """
    NCI C-Code: C16830 Definition: Any instrument, apparatus, implement, machine, appliance, implant, reagent for in vitro use, software, material or other similar or related article, intended by the manufacturer to be used, alone or in combination for, one or more specific medical purpose(s). [After REGULATION (EU) 2017/745 OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL of 5 April 2017 on medical devices] Preferred Term: Medical Device  # noqa: E501
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    description: StrictStr = Field(...)
    label: StrictStr = Field(...)
    hardware_version: StrictStr = Field(default=..., alias="hardwareVersion")
    software_version: StrictStr = Field(default=..., alias="softwareVersion")
    embedded_product: Optional[StrictStr] = Field(default=None, alias="embeddedProduct")
    sourcing: Optional[StrictStr] = None
    notes: StrictStr = Field(...)
    identifiers: Optional[conlist(StrictStr)] = None
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties = ["id", "name", "description", "label", "hardwareVersion", "softwareVersion", "embeddedProduct", "sourcing", "notes", "identifiers", "instanceType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MedicalDevice:
        """Create an instance of MedicalDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MedicalDevice:
        """Create an instance of MedicalDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MedicalDevice.parse_obj(obj)

        _obj = MedicalDevice.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "label": obj.get("label"),
            "hardware_version": obj.get("hardwareVersion"),
            "software_version": obj.get("softwareVersion"),
            "embedded_product": obj.get("embeddedProduct"),
            "sourcing": obj.get("sourcing"),
            "notes": obj.get("notes"),
            "identifiers": obj.get("identifiers"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


