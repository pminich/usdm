# coding: utf-8

"""
    USDM to OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ObservationalStudyDesign(BaseModel):
    """
    NCI C-Code: CNEW Definition: The strategy that specifies the structure of an observational study in terms of the planned activities (including timing) and statistical analysis approach intended to meet the objectives of the study. Preferred Term: Observational Study Design  # noqa: E501
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    description: StrictStr = Field(...)
    label: StrictStr = Field(...)
    rationale: StrictStr = Field(...)
    activities: Optional[conlist(StrictStr)] = None
    study_phase: Optional[StrictStr] = Field(default=None, alias="studyPhase")
    biospecimen_retentions: Optional[conlist(StrictStr)] = Field(default=None, alias="biospecimenRetentions")
    study_type: Optional[StrictStr] = Field(default=None, alias="studyType")
    therapeutic_areas: Optional[conlist(StrictStr)] = Field(default=None, alias="therapeuticAreas")
    characteristics: Optional[conlist(StrictStr)] = None
    notes: Optional[conlist(StrictStr)] = None
    encounters: Optional[conlist(StrictStr)] = None
    estimands: Optional[conlist(StrictStr)] = None
    indications: Optional[conlist(StrictStr)] = None
    objectives: Optional[conlist(StrictStr)] = None
    schedule_timelines: Optional[conlist(StrictStr)] = Field(default=None, alias="scheduleTimelines")
    arms: conlist(StrictStr) = Field(...)
    study_cells: conlist(StrictStr) = Field(default=..., alias="studyCells")
    document_versions: Optional[conlist(StrictStr)] = Field(default=None, alias="documentVersions")
    elements: Optional[conlist(StrictStr)] = None
    study_interventions: Optional[conlist(StrictStr)] = Field(default=None, alias="studyInterventions")
    epochs: conlist(StrictStr) = Field(...)
    population: Optional[StrictStr] = None
    time_perspective: StrictStr = Field(default=..., alias="timePerspective")
    sub_types: Optional[conlist(StrictStr)] = Field(default=None, alias="subTypes")
    model: StrictStr = Field(...)
    sampling_method: Optional[StrictStr] = Field(default=None, alias="samplingMethod")
    biomedical_concepts: Optional[conlist(StrictStr)] = Field(default=None, alias="biomedicalConcepts")
    bc_categories: Optional[conlist(StrictStr)] = Field(default=None, alias="bcCategories")
    bc_surrogates: Optional[conlist(StrictStr)] = Field(default=None, alias="bcSurrogates")
    analysis_populations: Optional[conlist(StrictStr)] = Field(default=None, alias="analysisPopulations")
    dictionaries: Optional[conlist(StrictStr)] = None
    conditions: Optional[conlist(StrictStr)] = None
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    __properties = ["id", "name", "description", "label", "rationale", "activities", "studyPhase", "biospecimenRetentions", "studyType", "therapeuticAreas", "characteristics", "notes", "encounters", "estimands", "indications", "objectives", "scheduleTimelines", "arms", "studyCells", "documentVersions", "elements", "studyInterventions", "epochs", "population", "timePerspective", "subTypes", "model", "samplingMethod", "biomedicalConcepts", "bcCategories", "bcSurrogates", "analysisPopulations", "dictionaries", "conditions", "instanceType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObservationalStudyDesign:
        """Create an instance of ObservationalStudyDesign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObservationalStudyDesign:
        """Create an instance of ObservationalStudyDesign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObservationalStudyDesign.parse_obj(obj)

        _obj = ObservationalStudyDesign.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "label": obj.get("label"),
            "rationale": obj.get("rationale"),
            "activities": obj.get("activities"),
            "study_phase": obj.get("studyPhase"),
            "biospecimen_retentions": obj.get("biospecimenRetentions"),
            "study_type": obj.get("studyType"),
            "therapeutic_areas": obj.get("therapeuticAreas"),
            "characteristics": obj.get("characteristics"),
            "notes": obj.get("notes"),
            "encounters": obj.get("encounters"),
            "estimands": obj.get("estimands"),
            "indications": obj.get("indications"),
            "objectives": obj.get("objectives"),
            "schedule_timelines": obj.get("scheduleTimelines"),
            "arms": obj.get("arms"),
            "study_cells": obj.get("studyCells"),
            "document_versions": obj.get("documentVersions"),
            "elements": obj.get("elements"),
            "study_interventions": obj.get("studyInterventions"),
            "epochs": obj.get("epochs"),
            "population": obj.get("population"),
            "time_perspective": obj.get("timePerspective"),
            "sub_types": obj.get("subTypes"),
            "model": obj.get("model"),
            "sampling_method": obj.get("samplingMethod"),
            "biomedical_concepts": obj.get("biomedicalConcepts"),
            "bc_categories": obj.get("bcCategories"),
            "bc_surrogates": obj.get("bcSurrogates"),
            "analysis_populations": obj.get("analysisPopulations"),
            "dictionaries": obj.get("dictionaries"),
            "conditions": obj.get("conditions"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


