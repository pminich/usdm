# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.study_cohort_output import StudyCohortOutput  # noqa: E501

class TestStudyCohortOutput(unittest.TestCase):
    """StudyCohortOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StudyCohortOutput:
        """Test StudyCohortOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StudyCohortOutput`
        """
        model = StudyCohortOutput()  # noqa: E501
        if include_optional:
            return StudyCohortOutput(
                id = '0',
                name = '0',
                label = '',
                description = '',
                includes_healthy_subjects = True,
                planned_enrollment_number = openapi_client.models.range.Range(
                    id = '0', 
                    min_value = 1.337, 
                    max_value = 1.337, 
                    unit = openapi_client.models.alias_code.AliasCode(
                        id = '0', 
                        standard_code = openapi_client.models.code.Code(
                            id = '0', 
                            code = '', 
                            code_system = '', 
                            code_system_version = '', 
                            decode = '', 
                            instance_type = 'Code', ), 
                        standard_code_aliases = [
                            openapi_client.models.code.Code(
                                id = '0', 
                                code = '', 
                                code_system = '', 
                                code_system_version = '', 
                                decode = '', 
                                instance_type = 'Code', )
                            ], 
                        instance_type = 'AliasCode', ), 
                    is_approximate = True, 
                    instance_type = 'Range', ),
                planned_completion_number = openapi_client.models.range.Range(
                    id = '0', 
                    min_value = 1.337, 
                    max_value = 1.337, 
                    unit = openapi_client.models.alias_code.AliasCode(
                        id = '0', 
                        standard_code = openapi_client.models.code.Code(
                            id = '0', 
                            code = '', 
                            code_system = '', 
                            code_system_version = '', 
                            decode = '', 
                            instance_type = 'Code', ), 
                        standard_code_aliases = [
                            openapi_client.models.code.Code(
                                id = '0', 
                                code = '', 
                                code_system = '', 
                                code_system_version = '', 
                                decode = '', 
                                instance_type = 'Code', )
                            ], 
                        instance_type = 'AliasCode', ), 
                    is_approximate = True, 
                    instance_type = 'Range', ),
                planned_sex = [
                    openapi_client.models.code.Code(
                        id = '0', 
                        code = '', 
                        code_system = '', 
                        code_system_version = '', 
                        decode = '', 
                        instance_type = 'Code', )
                    ],
                criterion_ids = [
                    ''
                    ],
                planned_age = openapi_client.models.range.Range(
                    id = '0', 
                    min_value = 1.337, 
                    max_value = 1.337, 
                    unit = openapi_client.models.alias_code.AliasCode(
                        id = '0', 
                        standard_code = openapi_client.models.code.Code(
                            id = '0', 
                            code = '', 
                            code_system = '', 
                            code_system_version = '', 
                            decode = '', 
                            instance_type = 'Code', ), 
                        standard_code_aliases = [
                            openapi_client.models.code.Code(
                                id = '0', 
                                code = '', 
                                code_system = '', 
                                code_system_version = '', 
                                decode = '', 
                                instance_type = 'Code', )
                            ], 
                        instance_type = 'AliasCode', ), 
                    is_approximate = True, 
                    instance_type = 'Range', ),
                notes = [
                    openapi_client.models.comment_annotation.CommentAnnotation(
                        id = '0', 
                        text = '', 
                        codes = [
                            openapi_client.models.code.Code(
                                id = '0', 
                                code = '', 
                                code_system = '', 
                                code_system_version = '', 
                                decode = '', 
                                instance_type = 'Code', )
                            ], 
                        instance_type = 'CommentAnnotation', )
                    ],
                instance_type = 'StudyCohort',
                characteristics = [
                    openapi_client.models.characteristic.Characteristic(
                        id = '0', 
                        name = '0', 
                        label = '', 
                        description = '', 
                        text = '', 
                        dictionary_id = '', 
                        notes = [
                            openapi_client.models.comment_annotation.CommentAnnotation(
                                id = '0', 
                                text = '', 
                                codes = [
                                    openapi_client.models.code.Code(
                                        id = '0', 
                                        code = '', 
                                        code_system = '', 
                                        code_system_version = '', 
                                        decode = '', 
                                        instance_type = 'Code', )
                                    ], 
                                instance_type = 'CommentAnnotation', )
                            ], 
                        instance_type = 'Characteristic', )
                    ]
            )
        else:
            return StudyCohortOutput(
                id = '0',
                name = '0',
                includes_healthy_subjects = True,
                instance_type = 'StudyCohort',
        )
        """

    def testStudyCohortOutput(self):
        """Test StudyCohortOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
