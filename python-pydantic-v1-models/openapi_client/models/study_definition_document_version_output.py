# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.code import Code
from openapi_client.models.comment_annotation import CommentAnnotation
from openapi_client.models.governance_date_output import GovernanceDateOutput
from openapi_client.models.narrative_content import NarrativeContent

class StudyDefinitionDocumentVersionOutput(BaseModel):
    """
    StudyDefinitionDocumentVersionOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    version: StrictStr = Field(...)
    status: Code = Field(...)
    date_values: Optional[conlist(GovernanceDateOutput)] = Field(default=None, alias="dateValues")
    contents: Optional[conlist(NarrativeContent)] = None
    child_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="childIds")
    notes: Optional[conlist(CommentAnnotation)] = None
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "version", "status", "dateValues", "contents", "childIds", "notes", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('StudyDefinitionDocumentVersion',):
            raise ValueError("must be one of enum values ('StudyDefinitionDocumentVersion')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StudyDefinitionDocumentVersionOutput:
        """Create an instance of StudyDefinitionDocumentVersionOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in date_values (list)
        _items = []
        if self.date_values:
            for _item in self.date_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dateValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item in self.contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StudyDefinitionDocumentVersionOutput:
        """Create an instance of StudyDefinitionDocumentVersionOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StudyDefinitionDocumentVersionOutput.parse_obj(obj)

        _obj = StudyDefinitionDocumentVersionOutput.parse_obj({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "status": Code.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "date_values": [GovernanceDateOutput.from_dict(_item) for _item in obj.get("dateValues")] if obj.get("dateValues") is not None else None,
            "contents": [NarrativeContent.from_dict(_item) for _item in obj.get("contents")] if obj.get("contents") is not None else None,
            "child_ids": obj.get("childIds"),
            "notes": [CommentAnnotation.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


