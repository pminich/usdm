# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, constr, validator
from openapi_client.models.code import Code
from openapi_client.models.quantity_output import QuantityOutput

class AdministrableProductPropertyOutput(BaseModel):
    """
    AdministrableProductPropertyOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    name: constr(strict=True, min_length=1) = Field(...)
    text: StrictStr = Field(...)
    type: Code = Field(...)
    quantity: QuantityOutput = Field(...)
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "name", "text", "type", "quantity", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('AdministrableProductProperty',):
            raise ValueError("must be one of enum values ('AdministrableProductProperty')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdministrableProductPropertyOutput:
        """Create an instance of AdministrableProductPropertyOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantity
        if self.quantity:
            _dict['quantity'] = self.quantity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdministrableProductPropertyOutput:
        """Create an instance of AdministrableProductPropertyOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdministrableProductPropertyOutput.parse_obj(obj)

        _obj = AdministrableProductPropertyOutput.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "text": obj.get("text"),
            "type": Code.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "quantity": QuantityOutput.from_dict(obj.get("quantity")) if obj.get("quantity") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


