# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.study_output import StudyOutput

class WrapperOutput(BaseModel):
    """
    WrapperOutput
    """
    study: StudyOutput = Field(...)
    usdm_version: StrictStr = Field(default=..., alias="usdmVersion")
    system_name: Optional[StrictStr] = Field(default=None, alias="systemName")
    system_version: Optional[StrictStr] = Field(default=None, alias="systemVersion")
    __properties = ["study", "usdmVersion", "systemName", "systemVersion"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WrapperOutput:
        """Create an instance of WrapperOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of study
        if self.study:
            _dict['study'] = self.study.to_dict()
        # set to None if system_name (nullable) is None
        # and __fields_set__ contains the field
        if self.system_name is None and "system_name" in self.__fields_set__:
            _dict['systemName'] = None

        # set to None if system_version (nullable) is None
        # and __fields_set__ contains the field
        if self.system_version is None and "system_version" in self.__fields_set__:
            _dict['systemVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WrapperOutput:
        """Create an instance of WrapperOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WrapperOutput.parse_obj(obj)

        _obj = WrapperOutput.parse_obj({
            "study": StudyOutput.from_dict(obj.get("study")) if obj.get("study") is not None else None,
            "usdm_version": obj.get("usdmVersion"),
            "system_name": obj.get("systemName"),
            "system_version": obj.get("systemVersion")
        })
        return _obj


