# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.code import Code
from openapi_client.models.comment_annotation import CommentAnnotation
from openapi_client.models.range_output import RangeOutput
from openapi_client.models.study_cohort_output import StudyCohortOutput

class StudyDesignPopulationOutput(BaseModel):
    """
    StudyDesignPopulationOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    name: constr(strict=True, min_length=1) = Field(...)
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    includes_healthy_subjects: StrictBool = Field(default=..., alias="includesHealthySubjects")
    planned_enrollment_number: Optional[RangeOutput] = Field(default=None, alias="plannedEnrollmentNumber")
    planned_completion_number: Optional[RangeOutput] = Field(default=None, alias="plannedCompletionNumber")
    planned_sex: Optional[conlist(Code, max_items=2)] = Field(default=None, alias="plannedSex")
    criterion_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="criterionIds")
    planned_age: Optional[RangeOutput] = Field(default=None, alias="plannedAge")
    notes: Optional[conlist(CommentAnnotation)] = None
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    cohorts: Optional[conlist(StudyCohortOutput)] = None
    __properties = ["id", "name", "label", "description", "includesHealthySubjects", "plannedEnrollmentNumber", "plannedCompletionNumber", "plannedSex", "criterionIds", "plannedAge", "notes", "instanceType", "cohorts"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('StudyDesignPopulation',):
            raise ValueError("must be one of enum values ('StudyDesignPopulation')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StudyDesignPopulationOutput:
        """Create an instance of StudyDesignPopulationOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of planned_enrollment_number
        if self.planned_enrollment_number:
            _dict['plannedEnrollmentNumber'] = self.planned_enrollment_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of planned_completion_number
        if self.planned_completion_number:
            _dict['plannedCompletionNumber'] = self.planned_completion_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in planned_sex (list)
        _items = []
        if self.planned_sex:
            for _item in self.planned_sex:
                if _item:
                    _items.append(_item.to_dict())
            _dict['plannedSex'] = _items
        # override the default output from pydantic by calling `to_dict()` of planned_age
        if self.planned_age:
            _dict['plannedAge'] = self.planned_age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cohorts (list)
        _items = []
        if self.cohorts:
            for _item in self.cohorts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cohorts'] = _items
        # set to None if label (nullable) is None
        # and __fields_set__ contains the field
        if self.label is None and "label" in self.__fields_set__:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if planned_enrollment_number (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_enrollment_number is None and "planned_enrollment_number" in self.__fields_set__:
            _dict['plannedEnrollmentNumber'] = None

        # set to None if planned_completion_number (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_completion_number is None and "planned_completion_number" in self.__fields_set__:
            _dict['plannedCompletionNumber'] = None

        # set to None if planned_age (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_age is None and "planned_age" in self.__fields_set__:
            _dict['plannedAge'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StudyDesignPopulationOutput:
        """Create an instance of StudyDesignPopulationOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StudyDesignPopulationOutput.parse_obj(obj)

        _obj = StudyDesignPopulationOutput.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "includes_healthy_subjects": obj.get("includesHealthySubjects"),
            "planned_enrollment_number": RangeOutput.from_dict(obj.get("plannedEnrollmentNumber")) if obj.get("plannedEnrollmentNumber") is not None else None,
            "planned_completion_number": RangeOutput.from_dict(obj.get("plannedCompletionNumber")) if obj.get("plannedCompletionNumber") is not None else None,
            "planned_sex": [Code.from_dict(_item) for _item in obj.get("plannedSex")] if obj.get("plannedSex") is not None else None,
            "criterion_ids": obj.get("criterionIds"),
            "planned_age": RangeOutput.from_dict(obj.get("plannedAge")) if obj.get("plannedAge") is not None else None,
            "notes": [CommentAnnotation.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "instance_type": obj.get("instanceType"),
            "cohorts": [StudyCohortOutput.from_dict(_item) for _item in obj.get("cohorts")] if obj.get("cohorts") is not None else None
        })
        return _obj


