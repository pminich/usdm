# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.address import Address
from openapi_client.models.code import Code
from openapi_client.models.study_site import StudySite

class OrganizationOutput(BaseModel):
    """
    OrganizationOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    name: constr(strict=True, min_length=1) = Field(...)
    label: Optional[StrictStr] = None
    type: Code = Field(...)
    identifier_scheme: StrictStr = Field(default=..., alias="identifierScheme")
    identifier: StrictStr = Field(...)
    legal_address: Optional[Address] = Field(default=None, alias="legalAddress")
    managed_sites: Optional[conlist(StudySite)] = Field(default=None, alias="managedSites")
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "name", "label", "type", "identifierScheme", "identifier", "legalAddress", "managedSites", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Organization',):
            raise ValueError("must be one of enum values ('Organization')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationOutput:
        """Create an instance of OrganizationOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_address
        if self.legal_address:
            _dict['legalAddress'] = self.legal_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in managed_sites (list)
        _items = []
        if self.managed_sites:
            for _item in self.managed_sites:
                if _item:
                    _items.append(_item.to_dict())
            _dict['managedSites'] = _items
        # set to None if label (nullable) is None
        # and __fields_set__ contains the field
        if self.label is None and "label" in self.__fields_set__:
            _dict['label'] = None

        # set to None if legal_address (nullable) is None
        # and __fields_set__ contains the field
        if self.legal_address is None and "legal_address" in self.__fields_set__:
            _dict['legalAddress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationOutput:
        """Create an instance of OrganizationOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganizationOutput.parse_obj(obj)

        _obj = OrganizationOutput.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "type": Code.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "identifier_scheme": obj.get("identifierScheme"),
            "identifier": obj.get("identifier"),
            "legal_address": Address.from_dict(obj.get("legalAddress")) if obj.get("legalAddress") is not None else None,
            "managed_sites": [StudySite.from_dict(_item) for _item in obj.get("managedSites")] if obj.get("managedSites") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


