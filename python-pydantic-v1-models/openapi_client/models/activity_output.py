# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.comment_annotation import CommentAnnotation
from openapi_client.models.procedure_output import ProcedureOutput

class ActivityOutput(BaseModel):
    """
    ActivityOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    name: constr(strict=True, min_length=1) = Field(...)
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    previous_id: Optional[StrictStr] = Field(default=None, alias="previousId")
    next_id: Optional[StrictStr] = Field(default=None, alias="nextId")
    child_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="childIds")
    defined_procedures: Optional[conlist(ProcedureOutput)] = Field(default=None, alias="definedProcedures")
    biomedical_concept_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="biomedicalConceptIds")
    bc_category_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="bcCategoryIds")
    bc_surrogate_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="bcSurrogateIds")
    timeline_id: Optional[StrictStr] = Field(default=None, alias="timelineId")
    notes: Optional[conlist(CommentAnnotation)] = None
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "name", "label", "description", "previousId", "nextId", "childIds", "definedProcedures", "biomedicalConceptIds", "bcCategoryIds", "bcSurrogateIds", "timelineId", "notes", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Activity',):
            raise ValueError("must be one of enum values ('Activity')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ActivityOutput:
        """Create an instance of ActivityOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in defined_procedures (list)
        _items = []
        if self.defined_procedures:
            for _item in self.defined_procedures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['definedProcedures'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        # set to None if label (nullable) is None
        # and __fields_set__ contains the field
        if self.label is None and "label" in self.__fields_set__:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if previous_id (nullable) is None
        # and __fields_set__ contains the field
        if self.previous_id is None and "previous_id" in self.__fields_set__:
            _dict['previousId'] = None

        # set to None if next_id (nullable) is None
        # and __fields_set__ contains the field
        if self.next_id is None and "next_id" in self.__fields_set__:
            _dict['nextId'] = None

        # set to None if timeline_id (nullable) is None
        # and __fields_set__ contains the field
        if self.timeline_id is None and "timeline_id" in self.__fields_set__:
            _dict['timelineId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ActivityOutput:
        """Create an instance of ActivityOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ActivityOutput.parse_obj(obj)

        _obj = ActivityOutput.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "previous_id": obj.get("previousId"),
            "next_id": obj.get("nextId"),
            "child_ids": obj.get("childIds"),
            "defined_procedures": [ProcedureOutput.from_dict(_item) for _item in obj.get("definedProcedures")] if obj.get("definedProcedures") is not None else None,
            "biomedical_concept_ids": obj.get("biomedicalConceptIds"),
            "bc_category_ids": obj.get("bcCategoryIds"),
            "bc_surrogate_ids": obj.get("bcSurrogateIds"),
            "timeline_id": obj.get("timelineId"),
            "notes": [CommentAnnotation.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


