# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, constr, validator

class DocumentContentReference(BaseModel):
    """
    DocumentContentReference
    """
    id: constr(strict=True, min_length=1) = Field(...)
    section_number: StrictStr = Field(default=..., alias="sectionNumber")
    section_title: StrictStr = Field(default=..., alias="sectionTitle")
    applies_to_id: StrictStr = Field(default=..., alias="appliesToId")
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "sectionNumber", "sectionTitle", "appliesToId", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DocumentContentReference',):
            raise ValueError("must be one of enum values ('DocumentContentReference')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DocumentContentReference:
        """Create an instance of DocumentContentReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DocumentContentReference:
        """Create an instance of DocumentContentReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DocumentContentReference.parse_obj(obj)

        _obj = DocumentContentReference.parse_obj({
            "id": obj.get("id"),
            "section_number": obj.get("sectionNumber"),
            "section_title": obj.get("sectionTitle"),
            "applies_to_id": obj.get("appliesToId"),
            "instance_type": obj.get("instanceType")
        })
        return _obj


