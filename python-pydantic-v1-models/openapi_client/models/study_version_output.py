# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.abbreviation_output import AbbreviationOutput
from openapi_client.models.administrable_product_output import AdministrableProductOutput
from openapi_client.models.code import Code
from openapi_client.models.comment_annotation import CommentAnnotation
from openapi_client.models.eligibility_criterion_output import EligibilityCriterionOutput
from openapi_client.models.governance_date_output import GovernanceDateOutput
from openapi_client.models.medical_device_output import MedicalDeviceOutput
from openapi_client.models.narrative_content_item import NarrativeContentItem
from openapi_client.models.organization_output import OrganizationOutput
from openapi_client.models.product_organization_role import ProductOrganizationRole
from openapi_client.models.reference_identifier import ReferenceIdentifier
from openapi_client.models.search_study_design_v3_study_designs_get200_response_inner import SearchStudyDesignV3StudyDesignsGet200ResponseInner
from openapi_client.models.study_amendment_output import StudyAmendmentOutput
from openapi_client.models.study_identifier import StudyIdentifier
from openapi_client.models.study_role import StudyRole
from openapi_client.models.study_title import StudyTitle

class StudyVersionOutput(BaseModel):
    """
    StudyVersionOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    version_identifier: StrictStr = Field(default=..., alias="versionIdentifier")
    rationale: StrictStr = Field(...)
    document_version_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="documentVersionIds")
    date_values: Optional[conlist(GovernanceDateOutput)] = Field(default=None, alias="dateValues")
    amendments: Optional[conlist(StudyAmendmentOutput)] = None
    business_therapeutic_areas: Optional[conlist(Code)] = Field(default=None, alias="businessTherapeuticAreas")
    study_identifiers: conlist(StudyIdentifier) = Field(default=..., alias="studyIdentifiers")
    reference_identifiers: Optional[conlist(ReferenceIdentifier)] = Field(default=None, alias="referenceIdentifiers")
    study_designs: Optional[conlist(SearchStudyDesignV3StudyDesignsGet200ResponseInner)] = Field(default=None, alias="studyDesigns")
    titles: conlist(StudyTitle) = Field(...)
    criteria: conlist(EligibilityCriterionOutput) = Field(...)
    narrative_content_items: Optional[conlist(NarrativeContentItem)] = Field(default=None, alias="narrativeContentItems")
    abbreviations: Optional[conlist(AbbreviationOutput)] = None
    roles: Optional[conlist(StudyRole)] = None
    organizations: Optional[conlist(OrganizationOutput)] = None
    administrable_products: Optional[conlist(AdministrableProductOutput)] = Field(default=None, alias="administrableProducts")
    medical_devices: Optional[conlist(MedicalDeviceOutput)] = Field(default=None, alias="medicalDevices")
    product_organization_roles: Optional[conlist(ProductOrganizationRole)] = Field(default=None, alias="productOrganizationRoles")
    notes: Optional[conlist(CommentAnnotation)] = None
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "versionIdentifier", "rationale", "documentVersionIds", "dateValues", "amendments", "businessTherapeuticAreas", "studyIdentifiers", "referenceIdentifiers", "studyDesigns", "titles", "criteria", "narrativeContentItems", "abbreviations", "roles", "organizations", "administrableProducts", "medicalDevices", "productOrganizationRoles", "notes", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('StudyVersion',):
            raise ValueError("must be one of enum values ('StudyVersion')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StudyVersionOutput:
        """Create an instance of StudyVersionOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in date_values (list)
        _items = []
        if self.date_values:
            for _item in self.date_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dateValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in amendments (list)
        _items = []
        if self.amendments:
            for _item in self.amendments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['amendments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in business_therapeutic_areas (list)
        _items = []
        if self.business_therapeutic_areas:
            for _item in self.business_therapeutic_areas:
                if _item:
                    _items.append(_item.to_dict())
            _dict['businessTherapeuticAreas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in study_identifiers (list)
        _items = []
        if self.study_identifiers:
            for _item in self.study_identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['studyIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_identifiers (list)
        _items = []
        if self.reference_identifiers:
            for _item in self.reference_identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['referenceIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in study_designs (list)
        _items = []
        if self.study_designs:
            for _item in self.study_designs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['studyDesigns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in titles (list)
        _items = []
        if self.titles:
            for _item in self.titles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['titles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in criteria (list)
        _items = []
        if self.criteria:
            for _item in self.criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict['criteria'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in narrative_content_items (list)
        _items = []
        if self.narrative_content_items:
            for _item in self.narrative_content_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['narrativeContentItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in abbreviations (list)
        _items = []
        if self.abbreviations:
            for _item in self.abbreviations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['abbreviations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organizations (list)
        _items = []
        if self.organizations:
            for _item in self.organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in administrable_products (list)
        _items = []
        if self.administrable_products:
            for _item in self.administrable_products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['administrableProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in medical_devices (list)
        _items = []
        if self.medical_devices:
            for _item in self.medical_devices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['medicalDevices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_organization_roles (list)
        _items = []
        if self.product_organization_roles:
            for _item in self.product_organization_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productOrganizationRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StudyVersionOutput:
        """Create an instance of StudyVersionOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StudyVersionOutput.parse_obj(obj)

        _obj = StudyVersionOutput.parse_obj({
            "id": obj.get("id"),
            "version_identifier": obj.get("versionIdentifier"),
            "rationale": obj.get("rationale"),
            "document_version_ids": obj.get("documentVersionIds"),
            "date_values": [GovernanceDateOutput.from_dict(_item) for _item in obj.get("dateValues")] if obj.get("dateValues") is not None else None,
            "amendments": [StudyAmendmentOutput.from_dict(_item) for _item in obj.get("amendments")] if obj.get("amendments") is not None else None,
            "business_therapeutic_areas": [Code.from_dict(_item) for _item in obj.get("businessTherapeuticAreas")] if obj.get("businessTherapeuticAreas") is not None else None,
            "study_identifiers": [StudyIdentifier.from_dict(_item) for _item in obj.get("studyIdentifiers")] if obj.get("studyIdentifiers") is not None else None,
            "reference_identifiers": [ReferenceIdentifier.from_dict(_item) for _item in obj.get("referenceIdentifiers")] if obj.get("referenceIdentifiers") is not None else None,
            "study_designs": [SearchStudyDesignV3StudyDesignsGet200ResponseInner.from_dict(_item) for _item in obj.get("studyDesigns")] if obj.get("studyDesigns") is not None else None,
            "titles": [StudyTitle.from_dict(_item) for _item in obj.get("titles")] if obj.get("titles") is not None else None,
            "criteria": [EligibilityCriterionOutput.from_dict(_item) for _item in obj.get("criteria")] if obj.get("criteria") is not None else None,
            "narrative_content_items": [NarrativeContentItem.from_dict(_item) for _item in obj.get("narrativeContentItems")] if obj.get("narrativeContentItems") is not None else None,
            "abbreviations": [AbbreviationOutput.from_dict(_item) for _item in obj.get("abbreviations")] if obj.get("abbreviations") is not None else None,
            "roles": [StudyRole.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "organizations": [OrganizationOutput.from_dict(_item) for _item in obj.get("organizations")] if obj.get("organizations") is not None else None,
            "administrable_products": [AdministrableProductOutput.from_dict(_item) for _item in obj.get("administrableProducts")] if obj.get("administrableProducts") is not None else None,
            "medical_devices": [MedicalDeviceOutput.from_dict(_item) for _item in obj.get("medicalDevices")] if obj.get("medicalDevices") is not None else None,
            "product_organization_roles": [ProductOrganizationRole.from_dict(_item) for _item in obj.get("productOrganizationRoles")] if obj.get("productOrganizationRoles") is not None else None,
            "notes": [CommentAnnotation.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


