# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.code import Code
from openapi_client.models.geographic_scope_output import GeographicScopeOutput

class GovernanceDateOutput(BaseModel):
    """
    GovernanceDateOutput
    """
    id: constr(strict=True, min_length=1) = Field(...)
    name: constr(strict=True, min_length=1) = Field(...)
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    type: Code = Field(...)
    date_value: date = Field(default=..., alias="dateValue")
    geographic_scopes: conlist(GeographicScopeOutput) = Field(default=..., alias="geographicScopes")
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "name", "label", "description", "type", "dateValue", "geographicScopes", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('GovernanceDate',):
            raise ValueError("must be one of enum values ('GovernanceDate')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GovernanceDateOutput:
        """Create an instance of GovernanceDateOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in geographic_scopes (list)
        _items = []
        if self.geographic_scopes:
            for _item in self.geographic_scopes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['geographicScopes'] = _items
        # set to None if label (nullable) is None
        # and __fields_set__ contains the field
        if self.label is None and "label" in self.__fields_set__:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GovernanceDateOutput:
        """Create an instance of GovernanceDateOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GovernanceDateOutput.parse_obj(obj)

        _obj = GovernanceDateOutput.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "type": Code.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "date_value": obj.get("dateValue"),
            "geographic_scopes": [GeographicScopeOutput.from_dict(_item) for _item in obj.get("geographicScopes")] if obj.get("geographicScopes") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


