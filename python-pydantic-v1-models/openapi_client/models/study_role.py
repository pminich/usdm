# coding: utf-8

"""
    DDF USDM API

    A simple TransCelerate Digital Data Flow (DDF) Study Definitions Repository API.

    The version of the OpenAPI document: 3.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.assigned_person import AssignedPerson
from openapi_client.models.code import Code
from openapi_client.models.masking import Masking

class StudyRole(BaseModel):
    """
    StudyRole
    """
    id: constr(strict=True, min_length=1) = Field(...)
    name: constr(strict=True, min_length=1) = Field(...)
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    code: Code = Field(...)
    applies_to_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="appliesToIds")
    assigned_persons: Optional[conlist(AssignedPerson)] = Field(default=None, alias="assignedPersons")
    organization_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="organizationIds")
    masking: Optional[Masking] = None
    instance_type: StrictStr = Field(default=..., alias="instanceType")
    __properties = ["id", "name", "label", "description", "code", "appliesToIds", "assignedPersons", "organizationIds", "masking", "instanceType"]

    @validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('StudyRole',):
            raise ValueError("must be one of enum values ('StudyRole')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StudyRole:
        """Create an instance of StudyRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of code
        if self.code:
            _dict['code'] = self.code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_persons (list)
        _items = []
        if self.assigned_persons:
            for _item in self.assigned_persons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assignedPersons'] = _items
        # override the default output from pydantic by calling `to_dict()` of masking
        if self.masking:
            _dict['masking'] = self.masking.to_dict()
        # set to None if label (nullable) is None
        # and __fields_set__ contains the field
        if self.label is None and "label" in self.__fields_set__:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if masking (nullable) is None
        # and __fields_set__ contains the field
        if self.masking is None and "masking" in self.__fields_set__:
            _dict['masking'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StudyRole:
        """Create an instance of StudyRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StudyRole.parse_obj(obj)

        _obj = StudyRole.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "code": Code.from_dict(obj.get("code")) if obj.get("code") is not None else None,
            "applies_to_ids": obj.get("appliesToIds"),
            "assigned_persons": [AssignedPerson.from_dict(_item) for _item in obj.get("assignedPersons")] if obj.get("assignedPersons") is not None else None,
            "organization_ids": obj.get("organizationIds"),
            "masking": Masking.from_dict(obj.get("masking")) if obj.get("masking") is not None else None,
            "instance_type": obj.get("instanceType")
        })
        return _obj


